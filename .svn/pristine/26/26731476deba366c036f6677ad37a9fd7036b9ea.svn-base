package com.allroot.wishMessage;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.allroot.Dao.WishAbout;
import com.allroot.Dao.EbayProductAbout;
import com.allroot.db.ConnDB;
import com.allroot.entity.EbayUser;
import com.allroot.entity.WishUser;
import com.allroot.tool.Constant;
import com.allroot.tool.FileUtil;
import com.allroot.tool.JSON;
import com.allroot.tool.Log;
import com.allroot.tool.MyHttpRequest;
import com.allroot.tool.Tools;
import com.allroot.tool.UuidUtil;

public class WishAutoGetMessage {
	public String SetDBValue(Object Avalue) {
		return Avalue == null ? "" : Avalue.toString().replaceAll("'", "''");
	}
	
	
	public void downMessage(WishUser user) {
		String logs = "开始下载wishMessage,等待API响应 " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
		Log.printLog(logs);
		
		String accessToken = user.getAccessToken();//
		String UID = user.getUID();
		String ShopName = user.getShopName();
		String suffix = user.getAliasName();//店铺简称
		String LPostData="start=0&limit=300&access_token="+accessToken;
		synProcess(LPostData,UID,ShopName,suffix);
		
	
	}
	/**
	 * 循环同步
	 */
	public void synProcess(String LPostData,String UID,String ShopName,String suffix){
		String logs = "";
		String sql = "";
		MyHttpRequest req = null;
		try {
			
			req = WishAbout.getWishMessageReturnHeaders(LPostData);
		} catch (Exception e) {
			logs = "下载用户："+UID+"店铺[" + ShopName + "]Message标题失败";
			Log.printLog(logs);
			Log.errLog(logs);
			return;
		}
		if (req==null) {
			logs = "下载用户："+UID+"店铺[" + ShopName + "]Message标题失败";
			Log.printLog(logs);
			Log.errLog(logs);
			return;
		}
		// 正常解析
		String jsonStr = req.getResponse();
		Map<String, Object> jsonobj = null;
		Map<String,Object> paging;
		String next="";
		int code =-1;
		if(jsonStr!=null && !jsonStr.isEmpty()){
			jsonobj = (Map<String, Object>) JSON.decode(jsonStr);
			code = Tools.toInt(jsonobj.get("code"));
			paging=(Map<String, Object>) jsonobj.get("paging");			
			if(paging!=null && !paging.isEmpty()){
				next=Tools.toString(paging.get("next"));
			}
		}else{
			logs = "下载用户："+UID+"店铺[" + ShopName + "]Message失败" ;
			Log.printLog(logs);
			Log.errLog(logs);
			return;
		}
		if (code != 0) {
			logs = "下载用户："+UID+"店铺[" + ShopName + "]Message标题失败," + Tools.toString(jsonobj.get("message"));
			Log.printLog(logs);
			Log.errLog(logs);
			return;
		}else{
			//开始解析数据
			List<Map<String,Object>> data=(List<Map<String, Object>>) jsonobj.get("data");
			if(data.isEmpty()){
				logs = "下载用户："+UID+"店铺[" + ShopName + "]Message标题失败," + Tools.toString(jsonobj.get("message"));
				Log.printLog(logs);
				Log.errLog(logs);
				return;
			}else{
				for(int i=0;i<data.size();i++){
					Map<String,Object> ticket = (Map<String, Object>) data.get(i).get("Ticket");
					List<Map<String,Object>> items = (List<Map<String, Object>>) ticket.get("items");
					
					List<Map<String,Object>> replies = (List<Map<String, Object>>) ticket.get("replies");
					String sender="";
					String ticket_id=Tools.toString(ticket.get("id"));
					String date="";
					String pattern = "EEE MMM dd HH:mm:ss zzz yyyy"; 
					SimpleDateFormat df = new SimpleDateFormat(pattern,Locale.US);
					String message="";
					String translated_message_zh="";
					String image_urls="";
					String ACK="";//店铺单号
					String buyer_id="";//买家id
					String subject=Tools.toString(ticket.get("subject"));//message标题
					String last_update_date=Tools.toString(ticket.get("last_update_date"));
					String state_id=Tools.toString(ticket.get("state_id"));//state_id： 4.等待你的回复 2.等待用户回应1.请求whis支持3.关闭客户问题
					String state="";
					if("4".equals(state_id)){
						state="0";
					}else if("2".equals(state_id)){
						state="1";
					}else if("1".equals(state_id)){
						state="2";
					}else if("3".equals(state_id)){
						state="3";
					}
					Date update_date = null;
					try {
						update_date = df.parse(last_update_date);
					} catch (ParseException e2) {
						logs = "下载用户："+UID+"店铺[" + ShopName + "]Message第" + i +"条id:"+ticket_id+"转换时间异常";
						Log.printLog(logs);
						Log.errLog(logs);
					}
					last_update_date=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(update_date);
					
					
					
					if(items!=null && !items.isEmpty()){
						Map<String,Object> Order = (Map<String, Object>) items.get(0).get("Order");
						ACK=Tools.toString(Order.get("order_id"));
						buyer_id=Tools.toString(Order.get("buyer_id"));
					}
					
					
					sql="if exists  ( select * from M_WishMessageReply(nolock) where ticket_id='"+Tools.SetDBValue(ticket_id)+"' and UID='"+Tools.SetDBValue(UID)+"')"
					+ "update M_WishMessageReply set date=" + "'" + SetDBValue(last_update_date) + "',state="+ "'" + SetDBValue(state) +"'where ticket_id='"+Tools.SetDBValue(ticket_id)+"' and UID='"+Tools.SetDBValue(UID)+"'"
					+ "delete from M_WishMessageDetails where ticket_id='"+Tools.SetDBValue(ticket_id)+"' and UID='"+Tools.SetDBValue(UID)+"'";
					try {
						System.out.println("sql====================" + sql);
						ConnDB.DBExcuteSQL(sql);
					} catch (Exception e1) {
						e1.printStackTrace();
						return;
					}
						sql = 	"if not exists  ( select * from M_WishMessageReply(nolock) where ticket_id='"+Tools.SetDBValue(ticket_id)+"' and UID='"+Tools.SetDBValue(UID)+"')"
								+"insert into M_WishMessageReply"
								  + "(ticket_id,suffix,ACK,buyer_id,state,subject,date,UID)"
								  + "values("
								  + "'" + SetDBValue(ticket_id) + "',"
								  + "'" + SetDBValue(suffix) + "',"
								  + "'" + SetDBValue(ACK) + "',"
								  + "'" + SetDBValue(buyer_id) + "',"
								  + "'" + SetDBValue(state) + "',"
								  + "'" + SetDBValue(subject) + "',"
								  + "'" + SetDBValue(last_update_date) + "',"
								  + "'" + SetDBValue(UID) + "')";
						try {
							ConnDB.executeUpdate(sql, false);
							for(int j=0;j<replies.size();j++){
								Map<String,Object> reply = (Map<String, Object>) replies.get(j).get("Reply");								
								sender = Tools.toString(reply.get("sender"));								
								date = Tools.toString(reply.get("date"));								
								String datess="";
								try {
									Date dates = df.parse(date);
									datess=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(dates);
								} catch (ParseException e1) {
									logs = "下载用户："+UID+"店铺[" + ShopName + "]Message第" + i +"条id:"+ticket_id+"转换时间异常";
									Log.printLog(logs);
									Log.errLog(logs);
								} 								
								message = Tools.toString(reply.get("message"));
								translated_message_zh = Tools.toString(reply.get("translated_message_zh"));
								image_urls = Tools.toString(reply.get("image_urls"));
								
								sql = "insert into M_WishMessageDetails"
									  + "(ticket_id,sender,replyDate,message,translated_message_zh,image_urls,UID)"
									  + "values("
									  + "'" + SetDBValue(ticket_id) + "',"
									  + "'" + SetDBValue(sender) + "',"
									  + "'" + SetDBValue(datess) + "',"
									  + "'" + SetDBValue(message) + "',"
									  + "'" + SetDBValue(translated_message_zh) + "',"
									  + "'" + SetDBValue(image_urls) + "',"
									  + "'" + SetDBValue(UID) + "')";	
								ConnDB.executeUpdate(sql, false);
							}
							
						} catch (Exception e) {
							e.printStackTrace();
							return;
						}
						
					
				}
				if(!next.isEmpty()){
					if(next.contains("limit")&&next.contains("access_token")){
						LPostData=next.substring(next.indexOf("?")+1);
					}else{
						LPostData=next.substring(next.indexOf("?")+1)+LPostData.substring(LPostData.indexOf("&"));
					}
					
					synProcess(LPostData,UID,ShopName,suffix);
				}
				
			}
		}
		
	}
	
	
	
	
	
	
}
